
In this directory, we continue to look at examples of work-sharing loops.
First by considering the task of matrix multipliction and secondly looking
at the 1D heat equation. 

1. Matrix Multiplication
========================

Matrix multiplication is often used as an example to highlight OpenMP work sharing in loops.
However, it is not really a sensible choice, as we will see in the next 3 example programs:

serial_naive_mm
---------------

This program contains some naive code to perform a matrix multiply. 

omp_naive_mm
------------

This program builds on the serial code and adds in OpenMP directives in an attempt
to get a speed-up.  Timed, as ever, on my trusty 2-core laptop, I get a speed-up of
~1.5*.  Not bad for a 2-core machine.

serial_blas_mm
--------------

However, we see that the above approach isn't sensible in the real world, as we can
perform a matrix multiplication using the highly optimised BLAS (Basic Linear Algebra
Subprograms) library.  In this case, I record a speed-up of ~6 using only one core**!
This shows us that blindly following the parallelisation matra isn't always sensible
and that highly optimised serial code can beat naive parallel code.  Especially attractive
if someone else has already written the highly optimised code and made the library as
ridiculously easy to install as have the folks at TACC:
	     http://www.tacc.utexas.edu/tacc-projects/gotoblas2 

* Your mileage may vary, depending on which machine you are running on
** and which implementation of the BLAS libraries you are using--indeed
many BLAS implementations are multi-threaded themselves nowadays, so using
such libraries can sometimes be the best route to gaining a parallel speed-up. 

2. 1D Heat Equation
===================

serial_heat
-----------

This is a nice short program which simulates heat diffusion along, say, a perfectly
insulated iron bar.  The heat equation is common in science and engineering and so
solving it quickly is useful.  Have a go at speeding it up using OpenMP.

(It turns out that this problem can also be profitably tackled using BLAS if we
change the method of solution to an 'implicit' one, such as the Crank-Nicolson
method, see e.g. https://source.ggy.bris.ac.uk/wiki/NumMethodsPDEs) 
